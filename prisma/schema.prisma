generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]
  role   String  @default("user")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  // images      String[]
  name        String
  slug        String   @unique
  description String
  price       Float
  state       String   @default("draft")
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  discount      Discount[]
  categories    Category[]
  variants      Variant[]
  orderProducts OrderProduct[]
}

model Discount {
  id           String   @id @default(uuid())
  amount       Float
  isPercentage Boolean
  startDate    DateTime
  endDate      DateTime
  productId    String?
  product      Product? @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Variant {
  id        String   @id @default(uuid())
  name      String
  quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id          String         @id @default(uuid())
  userId      String
  finalPrice  Float
  promoCodeId String?
  products    OrderProduct[]
  status      String         @default("ordered")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  promoCode PromoCode? @relation(fields: [promoCodeId], references: [id])
}

model OrderProduct {
  id         String   @id @default(uuid())
  orderId    String
  quantity   Int      @default(1)
  finalPrice Float
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model PromoCode {
  id             String    @id @default(uuid())
  code           String    @unique
  expirationDate DateTime?
  discountType   String?   @default("percentage")
  discountAmount Float?
  usesCount      Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  orders Order[]
}

// enum State {
//   DRAFT
//   PUBLISHED
// }

// enum DiscountType {
//   PERCENTAGE
//   AMOUNT
// }

// enum Role {
//   USER
//   ADMIN
// }

// enum OrderStatus {
//   ORDERED
//   SHIPPING
//   COMPLETE
//   REFUNDED
//   CANCELED
// }
